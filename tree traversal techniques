class Node{
    int val;
    Node left,right;
    Node(int val){
        this.val=val;
        left=right=null;
    }
    public class BinaryTree{
        Node root;
        void buildSampleTree(){
            root=newNode(1);
            root.left=newNode(2);
            root.right=newNode(3);
            root.left.left=newNode(4);
            root.left.right=newNode(5);
        }
        void inorder(Node node){
            if(node!=null){
                inorder(node.left);
                System.out.print(node.val+" ");
                 inorder(node.right);
            }
        }
        void preorder(Node node){
            if(node!=null){
                System.out.print(node.val+" ");
                preorder(node.left);
                preorder(node.right);
            }
        }
        void postorder(Node node){
            if(node!=null){
                postorder(node.left);
                postorder(node.right);
                System.out.print(node.val+ " ");
            }
        }
        void levelOrder(){
            if(root==null) return;
            java.util.Queue<Node> 
            queue=new java.util.linkedlist<>();
            queue.add(root);
            while(!queue. isEmpty()){
                Node current=queue.poll();
            System.out.print(current.val+" ");
            }
        }
        if(current.left!=null)
        queue.add(current.left);
        if(current.right!null)
        queue.add(current.right);
    }
}
public static void main(String[]args){
    BinaryTree tree=new BinaryTree();
    tree.buildSampletree();
    System.out.println("inorder Traversal:");
    tree.inorder(tree.root);
    System.out.println("inpreorder Traversal:");
}
           
